参考：https://blog.csdn.net/lmjy102/article/details/70207993

<?php

	/**
	* Error错误信息
	* Code 错误码
	* Message错误信息
	*/
	class Error{
		private static  $Code = 0;
		private static  $Message = "OK";
		
		/**
		 * 设置错误码
		 * @param int $Code 错误码
		 */
		public static function setErrorCode($Code){
			self::$Code = $Code;
		}

		/**
		 * 设置错误信息
		 * @param string $Message 错误信息
		 */
		public static function setErrorMessage($Message){
			self::$Message = $Message;
		}

		/**
		 * 设置错误详情
		 * @param int $Code    错误码
		 * @param string $Message 错误信息
		 */
		public static function setErrorInfo($Code, $Message){
			self::setErrorCode($Code);
			self::setErrorMessage($Message);
		}

		/**
		 * 获取错误码
		 * @return int 错误码
		 */
		public static function getErrorCode(){
			return self::$Code;
		}

		/**
		 * 获取错误信息
		 * @return string 错误信息
		 */
		public static function getErrorMessage(){
			return self::$Message;
		}
	}

	/**
	 * Redis；写这个重要是对redis基本数据类型有个大概了解印象
	 * 返回值说明 fasle:证明key不存在;NULL系统错误
	 * 
	 * 使用缓存时，需要考虑到缓存穿透，缓存击穿，缓存雪崩问题
	 * 缓存穿透：缓存不存在key,会到DB查询数据写入缓存,如数据开始不存在，则每次都会直接请求到DB(方案:缓存空结果;设置缓存大小范围)
	 * 缓存雪崩：缓存系统设置过期时间相同，导致同一时刻同时失效，请求直接到DB(过期时间随机)
	 * 缓存击穿：单个热点数据失效，导致请求直接到DB
	 */
	class MyRedis{

		private static $Instance = NULL;
		private $RedisObj;

		public $Code = 0;
		public $Message = "OK";

		private function __clone(){}
		
		private function __construct($Host, $Port, $TimeOut){
			try {
				$this->RedisObj = new redis();

				//连接方式除了connect之外，还有pconnect连接
				$this->RedisObj->connect($Host, $Port, $TimeOut);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return false;
			}
		}

		public static function getInstance($Host = "localhost", $Port = 6379, $TimeOut = 30){
			if (is_null(self::$Instance)) {
				self::$Instance = new self($Host, $Port, $TimeOut);
			}
			return self::$Instance;
		}

		/*************************HASH操作***********************************************/

		/**
		 * 获取hash表指定字段值
		 * @param  string $Key   key
		 * @param  string $Field 字段
		 * @return string|false
		 */
		public function hGet($Key, $Field){
			try {
				return $this->RedisObj->hGet($Key, $Field);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
		 * 设置hash表字段值
		 * @param  string $Key   Key
		 * @param  String $Field Field
		 * @param  String $Value Value
		 * @return int|NULL
		 */
		public function hSet($Key, $Field, $Value){
			try {
				return $this->RedisObj->hSet($Key, $Field, $Value);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
		 * 查看hash表字段是否存在
		 * @param  string $Key   Key
		 * @param  Field $Field Field
		 * @return string|NULL
		 */
		public function hExists($Key, $Field){
			try {
				return $this->RedisObj->hExists($Key, $Field);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
		 * 删除hash中的指定字段
		 * @param  String $Key   key
		 * @param  String $Field Field
		 * @return int|NULL        
		 */
		public function hDel($Key, $Field){
			try {
				return $this->RedisObj->hDel($Key, $Field);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
		 * 批量删除hash中的字段信息
		 * @param  String $Key    Key
		 * @param  ARRAY $Fields 字段数组
		 * @return int|NULL       
		 */
		public function hDelBatch($Key, $Fields){
			try {
				if (is_array($Fields)) {
					return 0;
				}

				//计数
				$DelNums = 0;
				foreach ($Fields as $Field) {
					$DelNums += $this->redis->hDel($Key, $Field);
				}
				return $DelNums;
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
		 * 获取hash中的元素个数
		 * @param  String $Key key
		 * @return INT|null      
		 */
		public function hLen($Key){
			try {
				return $this->RedisObj->hLen($Key);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
	     * 为hash表设定一个字段的值,如果字段存在，返回false
	     * @param string $key Key
	     * @param string  $field Field
	     * @param string $value Value
	     * @return boolean|NULL
	     */
		public function hSetNx($Key, $Field, $Value){
			try {
				return $this->RedisObj->hSetNx($Key, $Field, $Value);
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
		}

		/**
	     * 为hash表多个字段设定值。
	     * @param string $key
	     * @param array $value
	     * @return array|bool
	     */
	    public function hMset($Key, $Value){
	    	try {
				if(!is_array($Value)){
		        	return NULL;
		        }
		        return $this->RedisObj->hMset($Key, $Value); 
			} catch (Exception $e) {
				Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
			}
	    }

	    /**
	     * 为hash表多个字段设定值。
	     * @param string $key
	     * @param array|string $value string以','号分隔字段
	     * @return array|bool
	     */
	    public function hMget($Key, $Field){
	    	try {
	    		if(is_array($Field)){
	    			return NULL;
	    		}

	            $Field = explode(',', $Field);
	        	return $this->RedisObj->hMget($Key, $Field);
	    		
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 为hash表设这累加，可以负数
	     * @param string $key
	     * @param int $field
	     * @param string $value
	     * @return bool
	     */
	    public function hIncrBy($Key, $Field, $Value){
	    	try {
	    		$Value = intval($Value);
	        	return $this->RedisObj->hIncrBy($Key, $Field, $Value);
	    		
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回所有hash表的所有字段
	     * @param string $key
	     * @return array|bool
	     */
	    public function hKeys($Key){
	    	try {
	       		return $this->RedisObj->hKeys($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回所有hash表的字段值，为一个索引数组
	     * @param string $key
	     * @return array|bool
	     */
	    public function hVals($Key){
	    	try {
	        	return $this->RedisObj->hVals($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回所有hash表的字段值，为一个关联数组
	     * @param string $key
	     * @return array|bool
	     */
	    public function hGetAll($Key){
	    	try {
	        	return $this->RedisObj->hGetAll($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**********************************有序集合操作****************************************/
	    /**
	     * 给当前集合添加一个元素
	     * 如果value已经存在，会更新order的值。
	     * @param string $key
	     * @param string $order 序号
	     * @param string $value 值
	     * @return bool
	     */
	    public function zAdd($Key, $Order, $Value){
	    	try {
	        	return $this->RedisObj->zAdd($Key, $Order, $Value);   
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 给$value成员的order值，增加$num,可以为负数
	     * @param string $key
	     * @param string $num 序号
	     * @param string $value 值
	     * @return 返回新的order
	     */
	    public function zinCry($Key, $Num, $Value){
	    	try {
	        	return $this->RedisObj->zinCry($Key, $Num, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除值为value的元素
	     * @param string $key
	     * @param stirng $value
	     * @return bool
	     */
	    public function zRem($Key, $Value){
	    	try {
	        	return $this->RedisObj->zRem($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 集合以order递增排列后，0表示第一个元素，-1表示最后一个元素
	     * @param string $key
	     * @param int $start
	     * @param int $end
	     * @return array|bool
	     */
	    public function zRange($Key, $Start, $End){
	    	try {
	        	return $this->RedisObj->zRange($Key, $Start, $End);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }


	    /**
	     * 集合以order递减排列后，0表示第一个元素，-1表示最后一个元素
	     * @param string $key
	     * @param int $start
	     * @param int $end
	     * @return array|bool
	     */
	    public function zRevRange($Key, $Start, $End){
	    	try {
	        	return $this->RedisObj->zRevRange($Key, $Start, $End);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 集合以order递增排列后，返回指定order之间的元素。
	     * min和max可以是-inf和+inf　表示最大值，最小值
	     * @param string $key
	     * @param int $start
	     * @param int $end
	     * @package array $option 参数
	     *     withscores=>true，表示数组下标为Order值，默认返回索引数组
	     *     limit=>array(0,1) 表示从0开始，取一条记录。
	     * @return array|bool
	     */
	    public function zRangeByScore($Key, $Start='-inf', $End="+inf", $Option=array()){
	    	try {
	        	return $this->RedisObj->zRangeByScore($Key, $Start, $End, $Option);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 集合以order递减排列后，返回指定order之间的元素。
	     * min和max可以是-inf和+inf　表示最大值，最小值
	     * @param string $key
	     * @param int $start
	     * @param int $end
	     * @package array $option 参数
	     *     withscores=>true，表示数组下标为Order值，默认返回索引数组
	     *     limit=>array(0,1) 表示从0开始，取一条记录。
	     * @return array|bool
	     */
	    public function zRevRangeByScore($Key, $Start = '+inf', $End = "-inf", $Option = array()){
	    	try {
	        	return $this->RedisObj->zRevRangeByScore($Key, $Start, $End, $Option);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回order值在start end之间的数量
	     * @param unknown $key
	     * @param unknown $start
	     * @param unknown $end
	     */
	    public function zCount($Key, $Start = "-inf", $End = "+inf"){
	    	try {
	        	return $this->RedisObj->zCount($Key, $Start, $End);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回值为value的order值
	     * @param unknown $key
	     * @param unknown $value
	     */
	    public function zScore($Key, $Value){
	    	try {
	        	return $this->RedisObj->zScore($Key,$Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回集合以score递增加排序后，指定成员的排序号，从0开始。
	     * @param unknown $key
	     * @param unknown $value
	     */
	    public function zRank($Key, $Value){
	    	try {
	        	return $this->RedisObj->zRank($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除集合中，score值在start end之间的元素　包括start end
	     * min和max可以是-inf和+inf　表示最大值，最小值
	     * @param unknown $key
	     * @param unknown $start
	     * @param unknown $end
	     * @return 删除成员的数量。
	     */
	    public function zRemRangeByScore($Key, $Start, $End){
	        try {
	        	return $this->RedisObj->zRemRangeByScore($Key, $Start, $End);
	        } catch (Exception $e) {
	        	Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	        }
	    }

	    /**
	     * 返回集合元素个数。
	     * @param unknown $key
	     */
	    public function zCard($Key){
	    	try {
	        	return $this->RedisObj->zCard($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	     
	    /*******************************队列操作命令**************************************/

	    /**
	     * 在队列尾部插入一个元素
	     * @param unknown $key
	     * @param unknown $value
	     * 返回队列长度
	     */
	    public function rPush($Key, $Value){
	    	try {
	        	return $this->RedisObj->rPush($Key, $Value); 
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 在队列尾部插入一个元素 如果key不存在，什么也不做,返回0
	     * @param unknown $key
	     * @param unknown $value
	     * 返回队列长度
	     */
	    public function rPushx($Key, $Value){
	    	try {
	        	return $this->RedisObj->rPushx($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 在队列头部插入一个元素
	     * @param unknown $key
	     * @param unknown $value
	     * 返回队列长度
	     */
	    public function lPush($Key, $Value){
	    	try {
	        	return $this->RedisObj->lPush($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 在队列头插入一个元素 如果key不存在，什么也不做,返回0
	     * @param unknown $key
	     * @param unknown $value
	     * 返回队列长度
	     */
	    public function lPushx($Key, $Value){
	    	try {
	        	return $this->RedisObj->lPushx($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回队列长度
	     * @param unknown $key
	     */
	    public function lLen($Key){
	    	try {
	        	return $this->RedisObj->lLen($Key); 
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回队列指定区间的元素
	     * @param unknown $key
	     * @param unknown $start
	     * @param unknown $end
	     */
	    public function lRange($Key, $Start = 0, $End = -1){
	    	try {
	        	return $this->RedisObj->lrange($Key, $Start, $End);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回队列中指定索引的元素
	     * @param unknown $key
	     * @param unknown $index
	     */
	    public function lIndex($Key, $Index){
	    	try {
	        	return $this->RedisObj->lIndex($Key, $Index);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 设定队列中指定index的值。index小于lLen($Key)
	     * @param unknown $key
	     * @param unknown $index
	     * @param unknown $value
	     */
	    public function lSet($Key, $Index, $Value){
	    	try {
	        	return $this->RedisObj->lSet($Key, $Index, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除值为vaule的count个元素
	     * count>0 从尾部开始
	     *  >0　从头部开始
	     *  =0　删除全部
	     * @param unknown $key
	     * @param unknown $count
	     * @param unknown $value
	     */
	    public function lRem($Key, $Count = 0, $Value){
	    	try {
	        	return $this->RedisObj->lRem($Key, $Count, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除并返回队列中的头元素。
	     * @param unknown $key
	     */
	    public function lPop($Key){
	    	try {
	        	return $this->RedisObj->lPop($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除并返回队列中的尾元素
	     * @param unknown $key
	     */
	    public function rPop($Key){
	    	try {
	        	return $this->RedisObj->rPop($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /*************redis字符串操作命令*****************/
	    /**
	     * 设置一个key
	     * @param unknown $key
	     * @param unknown $value
	     */
	    public function set($Key, $Value){
	    	try {
	        	return $this->RedisObj->set($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 得到一个key
	     * @param unknown $key
	     */
	    public function get($Key){
	    	try {
	        	return $this->RedisObj->get($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 设置一个有过期时间的key
	     * @param unknown $key
	     * @param unknown $expire
	     * @param unknown $value
	     */
	    public function setex($Key, $Expire, $Value){
	    	try {
	        	return $this->RedisObj->setex($Key, $Expire, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 设置一个key,如果key存在,不做任何操作. set not exists
	     * @param unknown $key
	     * @param unknown $value
	     */
	    public function setnx($Key, $Value){
	    	try {
	        	return $this->RedisObj->setnx($Key, $Value);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 批量设置key
	     * @param unknown $arr
	     */
	    public function mset($Arr){
	    	try {
	        	return $this->RedisObj->mset($Arr);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	     /*************redis　无序集合操作命令*****************/

	    /**
	     * 返回集合中所有元素
	     * @param unknown $key
	     */
	    public function sMembers($Key){
	    	try {
	       		return $this->RedisObj->sMembers($key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	     
	    /**
	     * 求2个集合的差集
	     * @param unknown $key1
	     * @param unknown $key2
	     */
	    public function sDiff($Key1, $Key2){
	        try {
	        	return $this->RedisObj->sDiff($Key1, $Key2);
	        } catch (Exception $e) {
	        	Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	        }
	    }

	    /**
	     * 返回无序集合的元素个数
	     * @param unknown $key
	     */
	    public function scard($Key){
	    	try {
	        	return $this->RedisObj->scard($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	    
	    /*************redis管理操作命令*****************/
	     
	    /**
	     * 清空当前数据库
	     * @return bool
	     */
	    public function flushDB(){
	    	try {
	       		return $this->RedisObj->flushDB();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回当前库状态
	     * @return array
	     */
	    public function info(){
	    	try {
	        	return $this->RedisObj->info();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 同步保存数据到磁盘
	     */
	    public function save(){
	    	try {
	       		return $this->RedisObj->save();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 异步保存数据到磁盘
	     */
	    public function bgSave(){
	    	try {
	        	return $this->RedisObj->bgSave();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回最后保存到磁盘的时间
	     */
	    public function lastSave(){
	    	try {
	        	return $this->RedisObj->lastSave();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 删除指定key
	     * @param unknown $key
	     */
	    public function del($Key){
	    	try {
	        	return $this->RedisObj->del($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 判断一个key值是不是存在
	     * @param unknown $key
	     */
	    public function exists($Key){
	    	try {
	        	return $this->RedisObj->exists($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 为一个key设定过期时间 单位为秒
	     * @param unknown $key
	     * @param unknown $expire
	     */
	    public function expire($Key, $Expire){
	    	try {
	        	return $this->RedisObj->expire($Key, $Expire);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	     
	    /**
	     * 返回一个key还有多久过期，单位秒
	     * @param unknown $key
	     */
	    public function ttl($Key){
	    	try {
	        	return $this->RedisObj->ttl($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 设定一个key什么时候过期，time为一个时间戳
	     * @param unknown $key
	     * @param unknown $time
	     */
	    public function exprieAt($Key, $TS){
	    	try {
	        	return $this->RedisObj->expireAt($Key, $TS);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 关闭服务器链接
	     */
	    public function close(){
	    	try {
	        	return $this->RedisObj->close();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 返回一个随机key
	     */
	    public function randomKey(){
	    	try {
	        	return $this->RedisObj->randomKey();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
     
     	/*********************事务的相关方法************************/
     
	    /**
	     * 监控key,就是一个或多个key添加一个乐观锁
	     * 在此期间如果key的值如果发生的改变，刚不能为key设定值
	     * 可以重新取得Key的值。
	     * @param unknown $key
	     */
	    public function watch($Key){
	    	try {
	        	return $this->RedisObj->watch($Key);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	     
	    /**
	     * 取消当前链接对所有key的watch
	     *  EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了
	     */
	    public function unwatch(){
	    	try {
	        	return $this->RedisObj->unwatch();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 开启一个事务
	     * 事务的调用有两种模式Redis::MULTI和Redis::PIPELINE，
	     * 默认是Redis::MULTI模式，
	     * Redis::PIPELINE管道模式速度更快，但没有任何保证原子性有可能造成数据的丢失
	     */
	    public function multi($type=\Redis::MULTI){
	    	try {
	        	return $this->RedisObj->multi($type);
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 执行一个事务
	     * 收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行
	     */
	    public function exec(){
	    	try {
	        	return $this->RedisObj->exec();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 回滚一个事务
	     */
	    public function discard(){
	    	try {
	        	return $this->RedisObj->discard();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }

	    /**
	     * 测试当前链接是不是已经失效
	     * 没有失效返回+PONG
	     * 失效返回false
	     */
	    public function ping(){
	    	try {
	        	return $this->RedisObj->ping();
	    	} catch (Exception $e) {
	    		Error::setErrorInfo($e->getCode(), $e->getMessage());
				return NULL;
	    	}
	    }
	     

	}

	$RedisObj = MyRedis::getInstance();

	$Key 	= "Key";
	$Field 	= "Field";
	$Value  = "Value"; 

	// $Res = $RedisObj->hGet($Key, $Field);
	// $Res = $RedisObj->hSet($Key, $Field, $Value);
	// var_dump($Res);

	$Key 	= "zKey";
	$Field 	= "zField";
	$Value  = "zValue3";
	$Order 	= -1;

	// $Res = $RedisObj->zAdd($Key, $Order, $Value);
	// $Res = $RedisObj->zRevRange($Key, 0, -1);
	// $Res = $RedisObj->zRangeByScore($Key);
	// $Res = $RedisObj->zRevRangeByScore($Key);
	// $Res = $RedisObj->zCount($Key, "-inf", "+inf");
	// $Res = $RedisObj->zScore($Key, $Value);
	// $Res = $RedisObj->zScore($Key, $Value);
	// $Res = $RedisObj->zRemRangeByScore($Key, -1, 0);
	// $Res = $RedisObj->zCard($Key);
	// var_dump($Res);
	
	$Key 	= "ListKey";
	$Value 	= "RListValue";

	// $Res = $RedisObj->rPush($Key, $Value);
	// $Res = $RedisObj->rPushx($Key, $Value);
	// $Res = $RedisObj->lPush($Key, $Value);
	// $Res = $RedisObj->lPushx($Key, $Value);
	// $Res = $RedisObj->lLen($Key);
	// $Res = $RedisObj->lRange($Key, 0, -1);
	// $Res = $RedisObj->lIndex($Key, 0);
	// $Res = $RedisObj->lSet($Key, $RedisObj->lLen($Key) - 1, "test5");
	// $Res = $RedisObj->lPop($Key);
	// $Res = $RedisObj->rPop($Key);
	// var_dump($Res);

	$Key 	= "StringKey";
	$Value 	= "StringValue1";

	// $Res = $RedisObj->set($Key, $Value);
	// $Res = $RedisObj->get($Key);
	// $Res = $RedisObj->setnx("StringKeyNX", $Value);
	$Res = $RedisObj->mset(["key1"=>"value1","key2"=>"value2"]);
	var_dump($Res);

	
